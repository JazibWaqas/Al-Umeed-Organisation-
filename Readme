
## Prerequisites

- Node.js (v16 or higher)
- npm (v7 or higher)
- MongoDB Atlas account
- Git

## Environment Setup

### Frontend Environment
Create a `.env` file in the frontend directory:
```env
VITE_API_URL=http://localhost:5000
```

### Backend Environment
Create a `.env` file in the backend directory:
```env
PORT=5000
MONGODB_URI=your_mongodb_atlas_uri
JWT_SECRET=your_jwt_secret
```

## Getting Started

### 1. Clone the Repository
```bash
git clone <repository-url>
cd aura
```

### 2. Frontend Setup
```bash
cd frontend
npm install
npm run dev
```
The frontend will be available at `http://localhost:5173`

### 3. Backend Setup
```bash
cd backend
npm install
npm run dev
```
The backend will be available at `http://localhost:5000`

## Development Workflow

### Frontend Development
- Located in the `frontend` directory
- Built with React + TypeScript
- Uses Vite as the build tool
- Styled with Tailwind CSS
- Key features:
  - Dashboard layout with sidebar navigation
  - File upload interface
  - Financial report viewing
  - Data visualization with Chart.js

### Backend Development
- Located in the `backend` directory
- Built with Node.js + Express + TypeScript
- MongoDB for data storage
- Key features:
  - File upload handling
  - Excel file processing
  - Authentication system
  - API endpoints for data management

## Available Scripts

### Frontend
- `npm run dev` - Start development server
- `npm run build` - Build for production
- `npm run preview` - Preview production build

### Backend
- `npm run dev` - Start development server
- `npm run build` - Build TypeScript
- `npm start` - Start production server

## Team Collaboration

### Environment Variables
For team collaboration, we use a shared `.env.example` file. Never commit actual `.env` files to the repository.

1. Copy `.env.example` to `.env` in both frontend and backend directories
2. Update the values in your local `.env` files
3. Keep `.env.example` updated with any new environment variables (but with placeholder values)

### Git Workflow
1. Create a new branch for each feature
2. Follow the naming convention: `feature/feature-name` or `fix/bug-name`
3. Submit pull requests for review
4. Ensure all tests pass before merging

## Deployment

### Frontend Deployment (Vercel/Netlify)
1. Connect your repository to Vercel/Netlify
2. Set up environment variables in the deployment platform
3. Configure build settings:
   - Build command: `npm run build`
   - Output directory: `dist`

### Backend Deployment (Render/Railway)
1. Connect your repository to Render/Railway
2. Set up environment variables
3. Configure build settings:
   - Build command: `npm run build`
   - Start command: `npm start`

## Project Features

### Financial Management
- Income Statement tracking
- Cash Flow monitoring
- Balance Sheet management
- Year and month-based organization

### File Management
- Excel file upload and processing
- In-browser file creation
- Template-based data entry
- Automatic categorization

### Data Visualization
- Interactive charts and graphs
- Trend analysis
- Custom report generation

## Troubleshooting

### Common Issues
1. **Port conflicts**: Ensure ports 5173 (frontend) and 5000 (backend) are available
2. **MongoDB connection**: Verify your MongoDB Atlas connection string
3. **Environment variables**: Check that all required variables are set

### Getting Help
- Check the project documentation
- Review the issue tracker
- Contact the project maintainers

## Contributing
1. Fork the repository
2. Create your feature branch
3. Commit your changes
4. Push to the branch
5. Create a Pull Request

